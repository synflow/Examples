/*
 * Copyright (c) 2013-2015, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256.deploy;

/**
 * This is the test of the SHA to deploy on a FPGA.
 * 
 * @author Matthieu Wipliez
 * @author Nicolas Siret
 */
network ShaDeployTest {
	import com.synflow.sha256.deploy.ShaDeploy;
	import examples.uart.Uart.*;

	source = new task {
		out bool txD, cts;

		u100 stimulus = 0x6162638000000000000000018;
		u4 i;

		void loop() {
			IDLE:
			cts.write(0);
			txD.write(1);
			waitDivisor();
			START:
			txD.write(0);
			i = 0;
			waitDivisor();
			DATA:
			for (; i < 8; i++) {
				txD.write(stimulus[0]);
				stimulus >>= 1;
				waitDivisor();
			}
			STOP:
			txD.write(1);
			waitDivisor();
		}

		u11 count;

		void waitDivisor() {
			for (count = DIVISOR; count != 0; count--) {
			}
		}
	};

	shaDeploy = new ShaDeploy();
	shaDeploy.reads(source.txD, source.cts);
	
	 /*expected = new task {
		void setup() {	
			u256 dut_hash = top_sha.hash.read;
			print("read hash from dut: ", dut_hash);
			assert(dut_hash == 0xBA7816BF_8F01CFEA_414140DE_5DAE2223_B00361A3_96177A9C_B410FF61_F20015AD);
			print("assertion passed");
		}
	};*/

}

