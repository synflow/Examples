/*
 * Copyright (c) 2013-2015, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256.deploy;

/**
 * This is a network to deploy the SHA-256 in a FPGA.
 * 
 * @author Matthieu Wipliez
 * @author Nicolas Siret
 */
network ShaDeploy {
	import com.synflow.led.LedDriver;
	import examples.uart.UartRx;
	import examples.uart.UartTx;
	import com.synflow.sha256.step2.TopShaStep2;

	properties {
		clocks: ["clkLed", "clkUART"]
	}

	in bool uart_rxd, uart_cts;
	out bool uart_txd, uart_rts, u8 leds;

	ledDriver = new LedDriver({ clock: "clkLed" });

	uartRx = new UartRx({ clock: "clkUART" });
	uartRx.reads(uart_rxd);

	convert8to32 = new task {
		properties { clock: "clkUART" }
		out sync u32 msg_o;

		u32 msg;
		u2 i;
		void loop() {
			msg = (u32) ((msg << 8) | uartRx.dout.read());
			if (i == 3) {
				i = 0;
				print("message: ", msg);
				msg_o.write(msg);
			} else {
				i++;
			}
		}
	};

	bufferRx = new task {
		properties { clock: "clkUART" }
		out sync u32 msg_o;

		u32 msg[16];
		u5 i, j;
		void loop() {
			j = 0;
			msg[i] = convert8to32.msg_o.read();
			if (i == 15) {
				for (; j <= 15; j++) {
					msg_o.write(msg[j]);
				}
				i = 0;
				j = 0;
			} else {
				i++;
			}
		}
	};

	topShaStep2 = new TopShaStep2({ clock: "clkUART" });
	topShaStep2.reads(bufferRx.msg_o);

	convert256to8 = new task {
		properties { clock: "clkUART" }
		out sync u8 msg_o;

		u256 hash;
		u6 i;
		void loop() {
			IDLE: hash = topShaStep2.hash.read();
			i = 0;
			print("hash: ", hash);
			assert(hash == 0xBA7816BF_8F01CFEA_414140DE_5DAE2223_B00361A3_96177A9C_B410FF61_F20015AD);
			print("assertion passed");
			loop: for (; i != 32; i++) {
				msg_o.write(hash & 0xFF);
				print("UART hash: ", hash & 0xFF);
				hash = hash >> 8;
			}
		}
	};

	bufferTx = new task {
		properties { clock: "clkUART" }
		out sync u8 msg_o;

		u8 msg[32];
		u5 i, j;
		void loop() {
			if (i == 31 && j == 31 && !uartTx.dataReady_n.read()) {
				msg_o.write(msg[j]);
				i = 0;
				j = 0;
			} else if (i == 31 && !uartTx.dataReady_n.read()) {
				msg_o.write(msg[j]);
				j++;
			} else if (i != 31) {
				msg[i] = convert256to8.msg_o.read();
				i++;
			}
			idle(1);
		}
	};

	uartTx = new UartTx({ clock: "clkUART" });
	uartTx.reads(bufferTx.msg_o);

	this.reads(uartTx.dout, uartTx.dataReady_n, ledDriver.leds);

}
