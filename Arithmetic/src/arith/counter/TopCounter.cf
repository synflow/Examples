/*
 * Copyright (c) 2012 - 2013, Nicolas Siret - Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package arith.counter;

import arith.coounter.Definitions.*;

network TopCounter {
	port out bool OutData, u15 digits;

	Counter = new task {
		port out count_t count;

		count_t count_i;

		void run() { //9-bit wrap-around counter.
			count.write(count_i);
			count_i++;
		}

	};

	Clip = new task {

		port out clipped O;

		void run() {
			count_t local = Counter.count.read();
			O.write(local > 63 ? 63 : local);
		}

	};

	Digit = new task {
		void run() { // Manages the 15-segments display of the Versa board.
			count_t count = Counter.count.read;
			u15 digits;
			if (count < 100) {
				digits = 0x01FF;
			} else if (count < 200) {
				digits = 0x4FFF;
			} else if (count < 300) {
				digits = 0x13DD;
			} else if (count < 400) {
				digits = 0x07DD;
			} else if (count < 500) {
				digits = 0x4DDD;
			} else if (count < 511) {
				digits = 0x25DD;
			} else {
				digits = 0x7EAB;
			}
			digits.write(digits);
		}
	};

	Compare = new arith.coounter.Compare;
	Compare.reads(Clip.O, Counter.count);
	Compare.writes(OutData);
}


