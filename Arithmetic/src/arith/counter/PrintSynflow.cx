/*
 * Copyright (c) 2013-2015, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package arith.counter;

task PrintSynflow {
	out u15 digit;
	
	const u15 leds[8] = {
		//     abc_defg_hjkl_mnp(DP)
		// S = a c_d f _  k _  p 
		0b101_1010_0010_0010,
		// Y =    _   g_ j  _m   
		0b000_0001_0100_1000,
		// N =  bc_ efg_   l_    
		0b011_0111_0001_0000,
		// F = a  _ ef _  k _  p 
		0b100_0110_0010_0010,
		// L =    _def _    _    
		0b000_1110_0000_0000,
		// O = abc_def _    _    
		0b111_1110_0000_0000,
		// W =  bc_ ef _   l_ n  
		0b011_0110_0001_0100,
		// nothing
		0
	};
	
	u3 i;

	void loop() {
		digit.write(~leds[i]);
		i++;
	}
}
