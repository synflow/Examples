/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package examples.uart;

task UartRx {
	import examples.uart.Uart.*;

	in bool din;
	out sync char dout;

	bool sin_old = false, sin = false;

	void loop() {
		// keep reading until there is a falling edge on SIN which means until sin_old is true and sin is false
		while (!(sin_old && !sin)) {
			sin_old = sin;
			sin = din.read();
		}

		// detected falling edge on input, wait a cycle
		waitDivisor();

		u8 data = 0;
		u4 i;
		// read data (LSB)
		for (i = 0; i < 8; i++) {
			waitDivisor_2();
			// data is sampled at the middle of the cycle
			data >>= 1;
			data[7] = din.read();
			waitDivisor_2();
		}

		dout.write(data);

		// go back to waiting for start of frame 
		sin_old = din.read();
		sin = din.read();
	}

	u11 count;

	void waitDivisor() {
		for (count = (u11) (DIVISOR - 1); count != 0; count--) {
		}
	}

	void waitDivisor_2() {
		for (count = DIVISOR / 2 - 1; count != 0; count--) {
		}
	}

}