/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package examples.uart;

/**
 * This task writes a byte to the UART
 * 
 * @author Matthieu Wipliez <matthieu.wipliez@synflow.com>
 */
task UartTx {
	import examples.uart.Uart.*;

	in sync u8 din;
	out bool dout, dataReady_n;

	u8 data;
	u4 i;

	void setup() {
		dataReady_n.write(false);
		dout.write(true);
	}

	void loop() {
	// wait for data to read
		data = din.read();
		dataReady_n.write(true);

		// start bit
		dout.write(0);
		waitDivisor();

		// write data (LSB)
		for (i = 0; i < 8; i++) {
			dout.write(data[0]);
			data >>= 1;
			waitDivisor();
		}

		// stop bit
		dout.write(true);
		waitDivisor();
		dataReady_n.write(false);
	}

	u11 count;

	void waitDivisor() {
		for (count = DIVISOR; count != 0; count--) {
		}
	}

}