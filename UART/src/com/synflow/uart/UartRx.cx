/*
 * Copyright (c) 2015 Big boss
 * All rights reserved.
 */
package com.synflow.uart;

import com.synflow.uart.UartImp.*;

network UartRx {
	in bool rx;
	out sync ready char dout;

	prescaler = new task {
	/**
 	 * This task implements a tick generator for the UART 
	 * BAUD RATE are usually from 9600 to 115200
	 * 
	 * See UartTx for more details
	 * 
	 * @author Nicolas Siret
	 */
		out sync bool tick;

		u16 acc;
		u17 tickGen;
		void loop() {
			tickGen = acc + BAUD_GEN_OVER;
			acc = (u16) tickGen;
			if (tickGen[16]) {
				tick.write(tickGen[16]);
			}
		}
	};

	rxFilter = new task {
	/**
     * Filter the rxd to suppress spikes using a 2 bit counter
	 * 
	 * 
	 * @author Nicolas Siret
	 */
		out sync bool startRx;
		out bool filteredRx;

		u2 counter;
		void loop() {
			if (prescaler.tick.read) {
			// When a data is read 4 times, the data is valid.
				if (rx.read && counter != 3) {
					counter++;
				} else if (!rx.read && counter != 0) {
					counter--;
				} else if (counter == 3) {
					filteredRx.write(true);
				} else if (counter == 0) {
					filteredRx.write(false);
					startRx.write(true);
				}
			}
		}
	};

	rxTask = new task {
		out bool start;

		u8 data = 0;
		u4 i; 
		u6 j;

		void loop() {
			detectStart: rxFilter.startRx.read; // Detect the start bit	
			
			waitData: for (j = 0; j != OVERSAMPLING + OVERSAMPLING / 2; j++) { // Wait for the data 
				prescaler.tick.read;
			}

			saveData: for (i = 0; i != 8; i++) { // read data (LSB)
				data >>= 1;
				data[7] = rxFilter.filteredRx.read();
				waitOverSamp: for (j = 0; j != OVERSAMPLING; j++) { // Wait for the next bit
					prescaler.tick.read;
				}
			}

			if (rxFilter.filteredRx.read()) {
				dout.write(data);
				print("UART Rx data: ", data);
			}
		}
	};
}
