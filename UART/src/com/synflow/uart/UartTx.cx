/*
 * Copyright (c) 2012-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.uart;
import com.synflow.uart.UartImp.*;
/**
 * This task writes a byte to the UART
 * 
 * @author Matthieu Wipliez <matthieu.wipliez@synflow.com>
 */
network UartTx {
	in bool cts, sync char din;
	out bool tx, dataReady;

	prescalerTx = new task {
	/**
 	 * This task implements a tick generator for the UART * 
	 * BAUD RATE are usually from 9600 to 115200
	 * 
	 * To generate 115200Hz from a 25MHz clock, you divide the clock by "217,01388..." 
	 * Not exactly a round number. The solution is to divide sometimes by 217, 
	 * sometimes by 218, making sure the ratio stays "217,01388". 
	 * 
	 * To do so, we need to do something like this 
	 *  while(1) {
	 *    acc += 115200;
	 *    if(acc>=2000000) 
	 *      print("tick"); 
	 *    acc %= 2000000;
	 *   }
	 * 
	 * @author Nicolas Siret
	 */
		out sync bool tick;

		u16 acc;
		u17 tickGen;
		void loop() {
			tickGen = acc + BAUD_GEN_INC;
			acc = (u16) tickGen;
			if (tickGen[16]){
				tick.write(tickGen[16]);			
			}
		}
	};

	txTask = new task {
		u8 data;
		u4 i;

		void setup() {
			dataReady.write(true);
			tx.write(true);
		}

		void loop() {
		// wait for data to read
			waitData: data = din.read();
			dataReady.write(false);

			// Test CTS
			while (cts.read) {
			}
			// start bit
			prescalerTx.tick.read;
			start: tx.write(0);
			
			data: for (i = 0; i < 8; i++) {// write data (LSB)
				prescalerTx.tick.read;
				tx.write(data[0]);
				data >>= 1;
			}

			// stop bit
			prescalerTx.tick.read;
			stop: tx.write(true);
			dataReady.write(true);
		}
	};

}