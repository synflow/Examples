/*
 * Copyright (c) 2014, Synflow SAS
 * Copyright (c) 2013, Shashank Bangalore Lakshman
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package dsp.mac;

/**
 * MAC - Multiplier and Accumulator
 * A 4-bit signed fraction [s.xxx] MAC unit with rounding
 * 
 * @author Shashank Bangalore Lakshman
 * @author Matthieu Wipliez
 */
task Mac {

	in i4 a, b; out i4 result;

	i4 sum;

	/**
	 * Clips the given input number from [-8, 7] to [-7, 7]
	 */
	const i4 clipNegative(i4 num) {
		return (num == -8) ? -7 : num;
	}

	void run() {
		i8 prod = clipNegative(a.read) * clipNegative(b.read);

		i4 prodRnd = (i4) (prod >> 3); //Rounding, truncation
		if (prod[2]) {
			prodRnd++; // compensation of lower significant bits
		}

		sum += prodRnd; // Sum
		result.write(sum);
	}

}
